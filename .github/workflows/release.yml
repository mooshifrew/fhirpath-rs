name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build CLI binaries for different platforms
  build-cli:
    name: Build CLI (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: octofhir-fhirpath-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: octofhir-fhirpath-linux-aarch64
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: octofhir-fhirpath-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: octofhir-fhirpath-macos-aarch64
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: octofhir-fhirpath-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build CLI
        run: cargo build --release --bin octofhir-fhirpath --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/octofhir-fhirpath ${{ matrix.name }}
          chmod +x ${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/octofhir-fhirpath.exe ${{ matrix.name }}

      - name: Upload CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  # Build Node.js bindings
  build-node:
    name: Build Node.js bindings (${{ matrix.settings.target }})
    runs-on: ${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build -- --target x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build -- --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: npm run build -- --target aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: fhirpath-node/package-lock.json

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux aarch64)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install dependencies
        working-directory: fhirpath-node
        run: npm ci

      - name: Build Node.js bindings
        working-directory: fhirpath-node
        run: ${{ matrix.settings.build }}

      - name: Upload Node.js bindings
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: fhirpath-node/*.node

  # Build WASM package
  build-wasm:
    name: Build WASM package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM package
        working-directory: fhirpath-wasm
        run: |
          npm run build
          npm run build:bundler
          npm run build:nodejs

      - name: Upload WASM package
        uses: actions/upload-artifact@v4
        with:
          name: wasm-package
          path: fhirpath-wasm/pkg/

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-cli, build-node, build-wasm]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog for release
        run: |
          # Generate changelog for the current tag
          git-cliff --latest --strip header --strip footer > RELEASE_NOTES.md
          
          # Update the full changelog
          git-cliff --output CHANGELOG.md
          
          # Commit the updated changelog
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ steps.tag.outputs.tag }} [skip ci]" || echo "No changelog changes to commit"
          git push || echo "No changes to push"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          mkdir -p release
          
          # Create CLI archives
          for dir in artifacts/octofhir-fhirpath-*; do
            if [ -d "$dir" ]; then
              binary_name=$(basename "$dir")
              if [[ "$binary_name" == *"windows"* ]]; then
                cd "$dir" && zip "../../release/${binary_name}.zip" * && cd - > /dev/null
              else
                tar -czf "release/${binary_name}.tar.gz" -C "$dir" .
              fi
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [build-cli, build-node, build-wasm]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish fhirpath-core
        run: cargo publish -p fhirpath-core --token ${{ secrets.CRATES_TOKEN }}

      - name: Wait for fhirpath-core to be available
        run: sleep 30

      - name: Publish fhirpath-cli
        run: cargo publish -p fhirpath-cli --token ${{ secrets.CRATES_TOKEN }}

  # Publish Node.js package
  publish-node:
    name: Publish Node.js package
    runs-on: ubuntu-latest
    needs: [build-node]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download Node.js bindings
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move bindings to package
        run: |
          mkdir -p fhirpath-node/bindings
          find artifacts -name "*.node" -exec cp {} fhirpath-node/ \;

      - name: Install dependencies
        working-directory: fhirpath-node
        run: npm ci

      - name: Publish to npm
        working-directory: fhirpath-node
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish WASM package
  publish-wasm:
    name: Publish WASM package
    runs-on: ubuntu-latest
    needs: [build-wasm]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download WASM package
        uses: actions/download-artifact@v4
        with:
          name: wasm-package
          path: fhirpath-wasm/pkg

      - name: Publish WASM to npm
        working-directory: fhirpath-wasm
        run: |
          cd pkg
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
