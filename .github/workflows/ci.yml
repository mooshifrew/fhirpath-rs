name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test Rust components
  test-rust:
    name: Test Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build all crates
        run: cargo build --workspace --all-features

      - name: Run tests
        run: cargo test --workspace --all-features

      - name: Build CLI binary
        run: cargo build --release --bin octofhir-fhirpath

      - name: Test CLI binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ./target/release/octofhir-fhirpath --help
          ./target/release/octofhir-fhirpath validate "Patient.name.family"

      - name: Test CLI binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\target\release\octofhir-fhirpath.exe --help
          .\target\release\octofhir-fhirpath.exe validate "Patient.name.family"

  # Test Node.js bindings
  test-node:
    name: Test Node.js bindings (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: fhirpath-node/package-lock.json

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-node-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Node.js dependencies
        working-directory: fhirpath-node
        run: npm ci

      - name: Build Node.js bindings
        working-directory: fhirpath-node
        run: npm run build

      - name: Test Node.js bindings
        working-directory: fhirpath-node
        run: npm test

  # Test WASM package
  test-wasm:
    name: Test WASM package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-latest-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM package (web)
        working-directory: fhirpath-wasm
        run: npm run build

      - name: Build WASM package (bundler)
        working-directory: fhirpath-wasm
        run: npm run build:bundler

      - name: Build WASM package (nodejs)
        working-directory: fhirpath-wasm
        run: npm run build:nodejs

      - name: Test WASM package
        working-directory: fhirpath-wasm
        run: npm run test

  # Security audit
  security-audit:
    name: Security audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run npm audit (Node.js bindings)
        working-directory: fhirpath-node
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: Run npm audit (WASM package)
        working-directory: fhirpath-wasm
        run: |
          if [ -f package-lock.json ]; then
            npm ci
            npm audit --audit-level moderate
          fi

      - name: Run npm audit (docs site)
        working-directory: docs-site
        run: |
          npm ci
          npm audit --audit-level moderate
